name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - flake: dockerImage
            flake_image: kopf-agent

    steps:
      - uses: actions/checkout@v4
      
      - uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never

      - name: Install skopeo using Nix
        run: |
          nix profile install nixpkgs#skopeo

      - name: Build and stream image to registry with skopeo
        env:
          REGISTRY: docker.io
          SKOPEO_USER: "wholelottahoopla"
          SKOPEO_PASS: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "Building ${{ matrix.flake_image }} with tag $TAG"
          nix build .#${{ matrix.flake }}
          echo "Built ${{ matrix.flake_image }}"
          TAG=$(git rev-parse HEAD)
          echo "Logging in to Docker Hub"
          echo "${SKOPEO_PASS}" | skopeo login --username "${SKOPEO_USER}" --password-stdin docker.io
          echo "Pushing ${{ matrix.flake_image }} with tag $TAG"
          ./result | gzip --fast | skopeo copy docker-archive:/dev/stdin docker://${SKOPEO_USER}/${{ matrix.flake_image }}:$TAG
          echo "Pushing ${{ matrix.flake_image }} with tag latest"
          ./result | gzip --fast | skopeo copy docker-archive:/dev/stdin docker://${SKOPEO_USER}/${{ matrix.flake_image }}:latest

      # Save Nix store cache after build
      - name: Save Nix store cache
        if: always()
        uses: actions/cache@v4
        with:
          path: /nix/store
          key: nix-store-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}
          restore-keys: |
            nix-store-${{ runner.os }}-

